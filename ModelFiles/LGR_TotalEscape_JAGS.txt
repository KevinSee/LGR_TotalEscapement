model {

	####################################
	# Set up parameters and initial states...
	####################################
	for(i in 1:4){
		acf[i] ~ dunif(-2,2) # unif prior on temporal correlation @ lag 1 
	}
	
	X.sigma ~ dunif(0, 20) # process error in log space
	X.tau <- pow(X.sigma, -2)
	X.log.all[1] ~ dunif(0,10) # initial state in log space
	
	# for over-dispersed negative binomial
	r ~ dgamma(0.01, 0.01)
	
	# Correction factor for the trap rate, to help it match window counts better	
# 	trap.bump ~ dbeta(1,1)
		
	# modeling proportion of fish available for window counts
	win.prop.avg ~ dbeta(1,1)	# avg daytime ascension rate
	win.prop.avg.logit <- logit(win.prop.avg)
	win.prop.true.logit[1] ~ dnorm(win.prop.avg.logit, win.prop.tau)
	win.prop.sigma ~ dunif(0, 10) # process error on window proportion correction
	win.prop.tau <- pow(win.prop.sigma, -2)
	
	# modeling proportion of fish re-ascending the dam
	reasc.avg ~ dbeta(1,1)	# avg re-ascension rate
	reasc.avg.logit <- logit(reasc.avg)
	reasc.true.logit[1] ~ dnorm(reasc.avg.logit, reasc.tau)
	reasc.sigma ~ dunif(0, 10) # process error on re-ascension proportion correction
	reasc.tau <- pow(reasc.sigma, -2)

	# modeling proportion of fish that are wild
	# 1st column is based on morphology, 2nd column is based on PBT
	for(j in 1:2) {
		wnc.avg[j] ~ dbeta(1,1)	# avg proportion of fish that are wild
		wnc.avg.logit[j] <- logit(wnc.avg[j])
		wnc.true.logit[1,j] ~ dnorm(wnc.avg.logit[j], wnc.tau[j])
		wnc.sigma[j] ~ dunif(0, 10) # process error on wild proportion
		wnc.tau[j] <- pow(wnc.sigma[j], -2)
	}
	
	# historical day-time passage rate
	for(i in 1:12) {
		hist.prop[i] ~ dbeta(1,1)
	}
	
	# parameter clean-up				
	for(i in 1:TotLadderWeeks) {
		win.prop.true[i] <- ilogit(win.prop.true.logit[i])
		reasc.true[i] <- ilogit(reasc.true.logit[i])

		for(j in 1:2) {
			wnc.true[i,j] <- ilogit(wnc.true.logit[i,j])
		}
	}
	
	####################################
	## True state of nature
	####################################
		
	for(i in 2:TotLadderWeeks) {
		# random walk
		X.log.all[i] ~ dnorm(X.log.all[i-1], X.tau)
		
		# autocorrelated random walk
		win.prop.mu[i] <- win.prop.avg.logit * (1-acf[1]) + acf[1] * logit(true.prop[i-1])
		win.prop.true.logit[i] ~ dnorm(win.prop.mu[i], win.prop.tau)
		
		reasc.mu[i] <- reasc.avg.logit * (1-acf[2]) + acf[2] * reasc.true.logit[i-1]
		reasc.true.logit[i] ~ dnorm(reasc.mu[i], reasc.tau)
			
		wnc.mu[i,1] <- wnc.avg.logit[1] * (1-acf[3]) + acf[3] * wnc.true.logit[i-1,1]
		wnc.true.logit[i,1] ~ dnorm(wnc.mu[i,1], wnc.tau[1])
		
		wnc.mu[i,2] <- wnc.avg.logit[2] * (1-acf[4]) + acf[4] * wnc.true.logit[i-1,2]
		wnc.true.logit[i,2] ~ dnorm(wnc.mu[i,2], wnc.tau[2])

	}
		
	# derived parameters
	for(i in 1:TotLadderWeeks) {
		true.prop[i] <- rho[i] * hist.prop[month.vec[i]] + (1-rho[i]) * win.prop.true[i]
		
		X.all[i] <- round(exp(X.log.all[i]))
		X.day[i] <- round(X.all[i] * true.prop[i])
		X.night[i] <- X.all[i] - X.day[i]
		X.reasc[i] <- round(X.all[i] * reasc.true[i])
			
		X.all.wild.morph[i] <- round(X.all[i] * wnc.true[i,1])
		X.new.wild.morph[i] <- round(X.all.wild.morph[i] * (1-reasc.true[i]))
		X.reasc.wild.morph[i] <- X.all.wild.morph[i] - X.new.wild.morph[i]
		X.night.wild.morph[i] <- X.new.wild.morph[i] * (1-true.prop[i])
		
		X.all.wild.pbt[i] <- round(X.all[i] * wnc.true[i,2])
		X.new.wild.pbt[i] <- round(X.all.wild.pbt[i] * (1-reasc.true[i]))
		X.reasc.wild.pbt[i] <- X.all.wild.pbt[i] - X.new.wild.pbt[i]
		X.night.wild.pbt[i] <- X.new.wild.pbt[i] * (1-true.prop[i])

	}
				
	####################################
	## What we observe
	####################################
	
	for(i in 1:TotLadderWeeks) {
		# at window: Poisson
#		Y.window[i] ~ dpois(X.day[i])

		# at window: over-dispersed negative binomial
		# overdispersed if r is small, approximately Poisson if r is very large
		p[i] <- r / (r + X.day[i])
		Y.window[i] ~ dnegbin(p[i], r)

		# in trap
		# uncertainty in trap rate
		trap.rate.true[i] ~ dbeta(trap.alpha[i], trap.beta[i])
		Y.trap[i] ~ dbin(trap.rate.true[i], X.all[i])
		
		# known trap rate, with trap.bump
#		Y.trap[i] ~ dbin(trap.rate[i] * 1/trap.bump, X.all[i])

		wild.morph[i] ~ dbin(wnc.true[i,1], trap.fish[i])
		wild.pbt[i] ~ dbin(wnc.true[i,2], trap.fish[i])

		# day-time tags
		DC.tags[i] ~ dbin(win.prop.true[i], Tot.tags[i])
				
		# re-ascension tags
		ReAsc.tags[i] ~ dbin(reasc.true[i], Tot.tags[i])
	}
	
	# in historical data
	for(i in 1:12) {
		for(j in 1:n.hist.yrs) {
			day.fish[i,j] ~ dbin(hist.prop[i], tot.fish[i,j])
		}
	}
		
	####################################
	## Summary statistics
	####################################
	
	X.tot.all <- sum(X.all)
	X.tot.day <- sum(X.day)
	X.tot.night <- sum(X.night)
	X.tot.reasc <- sum(X.reasc)

	X.tot.all.wild.morph <- sum(X.all.wild.morph)
	X.tot.new.wild.morph <- sum(X.new.wild.morph)
	X.tot.night.wild.morph <- sum(X.night.wild.morph)
	X.tot.reasc.wild.morph <- sum(X.reasc.wild.morph)

	X.tot.all.wild.pbt <- sum(X.all.wild.pbt)
	X.tot.new.wild.pbt <- sum(X.new.wild.pbt)
	X.tot.night.wild.pbt <- sum(X.night.wild.pbt)
	X.tot.reasc.wild.pbt <- sum(X.reasc.wild.pbt)

	prop.tagged.morph <- sum(wild.morph) / X.tot.new.wild.morph
	prop.tagged.pbt <- sum(wild.pbt) / X.tot.new.wild.pbt
		
}